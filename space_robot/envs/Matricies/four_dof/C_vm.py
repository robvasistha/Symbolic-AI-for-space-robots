import numpy as np 
import math
def C_vm (in1,in2,in3,in4,in5,in6,in7,in8,in9,in10):
#NONLINEAR_C_VM
#    C_VM = NONLINEAR_C_VM(IN1,IN2,IN3,IN4,IN5,IN6,IN7,IN8,IN9,IN10)

#    This function was generated by the Symbolic Math Toolbox version 8.0.
	in1 = np.insert(in1,0,0)
	in2 = np.insert(in2,0,0)
	in3 = np.insert(in3,0,0)
	in4 = np.insert(in4,0,0)
	in5 = in5.T.flatten()
	in5 = np.insert(in5,0,0)
	in6 = in6.T.flatten()
	in6 = np.insert(in6,0,0)
	in7 = in7.T.flatten()
	in7 = np.insert(in7,0,0)
	in8 = np.insert(in8,0,0)
	in9 = np.insert(in9,0,0)
	in10 = in10.T.flatten()
	in10 = np.insert(in10,0,0)
#    09-May-2019 15:35:39

	b2_1 = in7[2]
	b2_2 = in7[7]
	b3_1 = in7[3]
	b3_2 = in7[8]
	b4_1 = in7[4]
	b4_2 = in7[9]
	b5_1 = in7[5]
	b5_2 = in7[10]
	m2 = in1[2 ]
	m3 = in1[3 ]
	m4 = in1[4 ]
	m5 = in1[5 ]
	theta1 = in3[1]
	theta2 = in3[2]
	theta3 = in3[3]
	theta4 = in3[4]
	theta_d1 = in4[1]
	theta_d2 = in4[2]
	theta_d3 = in4[3]
	theta_d4 = in4[4]
	t2 = np.cos(theta1)
	t3 = np.cos(theta4)
	t4 = np.sin(theta1)
	t5 = np.sin(theta4)
	t6 = np.sin(theta2)
	t7 = np.sin(theta3)
	t8 = np.cos(theta2)
	t9 = np.cos(theta3)
	t11 = t2*t6*t7
	t12 = t2*t8*t9
	t10 = t11-t12
	t13 = b4_1*t10
	t14 = t2*t7*t8
	t15 = t2*t6*t9
	t16 = t14+t15
	t17 = b4_2*t16
	t18 = t4*t5
	t19 = t3*t10
	t20 = t18+t19
	t21 = b5_1*t20
	t22 = t3*t4
	t31 = t5*t10
	t23 = t22-t31
	t24 = b5_2*t23
	t25 = t4*t7*t8
	t26 = t4*t6*t9
	t27 = t25+t26
	t28 = b3_2*t2*t6
	t29 = t4*t6*t7
	t32 = t4*t8*t9
	t30 = t29-t32
	t33 = b5_1*t3*t27*2.0
	t34 = t2*t5
	t41 = t3*t30
	t35 = t34-t41
	t36 = t2*t3
	t37 = t5*t30
	t38 = t36+t37
	t39 = b4_1*t30
	t40 = b4_2*t27
	t42 = b5_1*t35
	t43 = b5_2*t38
	t44 = b3_2*t4*t6
	t45 = b5_1*t3*t16*2.0
	t46 = t6*t7
	t48 = t8*t9
	t47 = t46-t48
	t49 = t7*t8
	t50 = t6*t9
	t51 = t49+t50
	t52 = b5_1*t3*t47*2.0
	C_vm = np.reshape([-m2*theta_d1*(b2_1*t2-b2_2*t4)+m4*theta_d3*(t13+t17)+m5*theta_d4*(t21+t24)+m3*theta_d2*(t28-b3_1*t2*t8),-m2*theta_d1*(b2_2*t2+b2_1*t4)+m4*theta_d3*(t39+t40)-m5*theta_d4*(t42+t43)+m3*theta_d2*(t44-b3_1*t4*t8),0.0,m3*theta_d2*(t28-b3_1*t2*t8+b3_1*t4*t6+b3_2*t4*t8)+m5*theta_d4*(t21+t24+b5_1*t3*t27-b5_2*t5*t27)+m4*theta_d3*(t13+t17+b4_1*t27-b4_2*t30),-m3*theta_d2*(-t44+b3_1*t2*t6+b3_2*t2*t8+b3_1*t4*t8)-m5*theta_d4*(t42+t43+b5_1*t3*t16-b5_2*t5*t16)+m4*theta_d3*(t39+t40+b4_2*t10-b4_1*t16),-m3*theta_d2*(b3_2*t6-b3_1*t8)-m4*theta_d3*(b4_1*t47+b4_2*t51)-m5*theta_d4*(b5_1*t3*t47-b5_2*t5*t47),m5*theta_d4*(t21+t24+t33-b5_2*t5*t27*2.0)+m4*theta_d3*(t13+t17+b4_1*t27*2.0-b4_2*t30*2.0),-m5*theta_d4*(t42+t43+t45-b5_2*t5*t16*2.0)+m4*theta_d3*(t39+t40+b4_2*t10*2.0-b4_1*t16*2.0),-m4*theta_d3*(b4_1*t47*2.0+b4_2*t51*2.0)-m5*theta_d4*(t52-b5_2*t5*t47*2.0),m5*theta_d4*(t21+t24+t33+b5_2*t35-b5_1*t38-b5_2*t5*t27*2.0),-m5*theta_d4*(t42+t43+t45-b5_2*t20+b5_1*t23-b5_2*t5*t16*2.0),-m5*theta_d4*(t52+b5_1*(t3+t5*t51)-b5_2*(t5-t3*t51)-b5_2*t5*t47*2.0)],(4,3)).T 
	return 	C_vm 