import numpy as np 
import math
def C_vm (in1,in2,in3,in4,in5,in6,in7,in8,in9,in10):
#NONLINEAR_C_VM
#    C_VM = NONLINEAR_C_VM(IN1,IN2,IN3,IN4,IN5,IN6,IN7,IN8,IN9,IN10)

#    This function was generated by the Symbolic Math Toolbox version 8.0.
	in1 = np.insert(in1,0,0)
	in2 = np.insert(in2,0,0)
	in3 = np.insert(in3,0,0)
	in4 = np.insert(in4,0,0)
	in5 = in5.T.flatten()
	in5 = np.insert(in5,0,0)
	in6 = in6.T.flatten()
	in6 = np.insert(in6,0,0)
	in7 = in7.T.flatten()
	in7 = np.insert(in7,0,0)
	in8 = np.insert(in8,0,0)
	in9 = np.insert(in9,0,0)
	in10 = in10.T.flatten()
	in10 = np.insert(in10,0,0)
#    14-May-2019 21:44:21

	b2_1 = in7[2]
	b2_2 = in7[9]
	b3_1 = in7[3]
	b3_2 = in7[10]
	b4_1 = in7[4]
	b4_2 = in7[11]
	b5_1 = in7[5]
	b5_2 = in7[12]
	m2 = in1[2 ]
	m3 = in1[3 ]
	m4 = in1[4 ]
	m5 = in1[5 ]
	theta1 = in3[1]
	theta2 = in3[2]
	theta3 = in3[3]
	theta4 = in3[4]
	theta_d1 = in4[1]
	theta_d2 = in4[2]
	theta_d3 = in4[3]
	theta_d4 = in4[4]
	t2 = np.cos(theta1)
	t3 = np.cos(theta2)
	t4 = np.sin(theta3)
	t5 = np.cos(theta3)
	t6 = np.sin(theta2)
	t7 = np.cos(theta4)
	t8 = t2*t3*t4
	t9 = t2*t5*t6
	t10 = t8+t9
	t11 = np.sin(theta4)
	t12 = t2*t3*t5
	t14 = t2*t4*t6
	t13 = t12-t14
	t15 = t7*t13
	t28 = t10*t11
	t16 = t15-t28
	t17 = b5_1*t16
	t18 = t7*t10
	t19 = np.sin(theta1)
	t20 = t3*t5*t19
	t26 = t4*t6*t19
	t21 = t20-t26
	t22 = t3*t4*t19
	t23 = t5*t6*t19
	t24 = t22+t23
	t25 = b4_2*t10
	t27 = b3_1*t2*t3
	t29 = t11*(t12-t14)
	t30 = t18+t29
	t31 = b5_2*t30
	t32 = t7*t24
	t33 = t7*t21
	t34 = t11*(t20-t26)
	t35 = t32+t34
	t37 = t11*t24
	t36 = t33-t37
	t38 = b5_1*t36
	t39 = b4_1*t21
	t40 = b3_1*t3*t19
	t41 = t3*t4
	t42 = t5*t6
	t43 = t41+t42
	t44 = t3*t5
	t46 = t4*t6
	t45 = t44-t46
	t47 = t7*t45
	t52 = t11*t43
	t48 = t47-t52
	t49 = t7*t43
	t50 = t11*t45
	t51 = t49+t50
	C_vm = np.reshape([-m2*theta_d1*(b2_1*t2-b2_2*t19)+m4*theta_d3*(t25-b4_1*t13)-m3*theta_d2*(t27-b3_2*t2*t6)-m5*theta_d4*(t17-b5_2*(t18+t11*t13)),-m2*theta_d1*(b2_2*t2+b2_1*t19)-m4*theta_d3*(t39-b4_2*t24)-m5*theta_d4*(t38-b5_2*t35)-m3*theta_d2*(t40-b3_2*t6*t19),0.0,m3*theta_d2*(-t27+b3_2*t2*t6+b3_2*t3*t19+b3_1*t6*t19)+m4*theta_d3*(t25-b4_1*t13+b4_1*t24+b4_2*(t20-t26))+m5*theta_d4*(-t17+t31+b5_2*t36+b5_1*(t32+t11*t21)),-m3*theta_d2*(t40+b3_2*t2*t3+b3_1*t2*t6-b3_2*t6*t19)-m4*theta_d3*(t39+b4_1*t10+b4_2*t13-b4_2*t24)-m5*theta_d4*(t38+b5_2*t16+b5_1*t30-b5_2*t35),m3*theta_d2*(b3_1*t3-b3_2*t6)-m4*theta_d3*(b4_2*t43-b4_1*t45)+m5*theta_d4*(b5_1*t48-b5_2*t51),m5*theta_d4*(-t17+t31+b5_1*t35*2.0+b5_2*t36*2.0)+m4*theta_d3*(t25-b4_1*t13+b4_1*t24*2.0+b4_2*(t20-t26)*2.0),-m4*theta_d3*(t39+b4_1*t10*2.0+b4_2*t13*2.0-b4_2*t24)-m5*theta_d4*(t38+b5_2*t16*2.0+b5_1*t30*2.0-b5_2*t35),-m4*theta_d3*(b4_2*t43*2.0-b4_1*t45*2.0)+m5*theta_d4*(b5_1*t48*2.0-b5_2*t51*2.0),m5*theta_d4*(-t17+t31+b5_1*t35*3.0+b5_2*t36*3.0),-m5*theta_d4*(t38+b5_2*t16*3.0+b5_1*t30*3.0-b5_2*t35),m5*theta_d4*(b5_1*t48*3.0-b5_2*t51*3.0),0.0,0.0,0.0,0.0,0.0,0.0],(6,3)).T 
	return 	C_vm 