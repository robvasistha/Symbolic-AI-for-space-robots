import numpy as np 
import math
def D_vm (in1,in2,in3,in4,in5,in6,in7,in8,in9):
#INERTIA_D_VM
#    D_VM = INERTIA_D_VM(IN1,IN2,IN3,IN4,IN5,IN6,IN7,IN8,IN9)

#    This function was generated by the Symbolic Math Toolbox version 8.2.
	in1 = np.insert(in1,0,0)
	in2 = np.insert(in2,0,0)
	in3 = np.insert(in3,0,0)
	in4 = in4.T.flatten()
	in4 = np.insert(in4,0,0)
	in5 = in5.T.flatten()
	in5 = np.insert(in5,0,0)
	in6 = in6.T.flatten()
	in6 = np.insert(in6,0,0)
	in7 = np.insert(in7,0,0)
	in8 = np.insert(in8,0,0)
	in9 = in9.T.flatten()
	in9 = np.insert(in9,0,0)
#    10-Jan-2019 22:35:44

	b2_1 = in6[2]
	b2_2 = in6[8]
	b3_1 = in6[3]
	b3_2 = in6[9]
	b3_3 = in6[15]
	b4_1 = in6[4]
	b4_2 = in6[10]
	b4_3 = in6[16]
	b5_1 = in6[5]
	b5_2 = in6[11]
	b5_3 = in6[17]
	b6_1 = in6[6]
	b6_2 = in6[12]
	b6_3 = in6[18]
	m2 = in1[2 ]
	m3 = in1[3 ]
	m4 = in1[4 ]
	m5 = in1[5 ]
	m6 = in1[6 ]
	s2_1 = in5[2]
	s2_2 = in5[8]
	s3_1 = in5[3]
	s3_2 = in5[9]
	s3_3 = in5[15]
	s4_1 = in5[4]
	s4_2 = in5[10]
	s4_3 = in5[16]
	s5_1 = in5[5]
	s5_2 = in5[11]
	s5_3 = in5[17]
	theta1 = in3[1]
	theta2 = in3[2]
	theta3 = in3[3]
	theta4 = in3[4]
	theta5 = in3[5]
	t2 = np.sin(theta1)
	t3 = np.cos(theta1)
	t4 = np.cos(theta2)
	t5 = np.sin(theta2)
	t6 = np.sin(theta3)
	t7 = np.cos(theta3)
	t8 = t3*t4*t6
	t9 = t3*t5*t7
	t10 = t8+t9
	t11 = t3*t4*t7
	t12 = np.cos(theta4)
	t16 = t3*t5*t6
	t13 = t11-t16
	t14 = np.sin(theta4)
	t15 = t10*t12
	t17 = t14*(t11-t16)
	t18 = t10*t14
	t20 = t12*t13
	t19 = t18-t20
	t21 = np.sin(theta5)
	t22 = np.cos(theta5)
	t23 = b4_1*t10
	t24 = b4_3*t2
	t25 = s3_3*t2
	t26 = s3_2*t3*t4
	t27 = s3_1*t3*t5
	t28 = b4_2*t13
	t29 = s4_1*t10
	t30 = s4_2*t13
	t31 = t15+t17
	t32 = t2*t4*t7
	t37 = t2*t5*t6
	t33 = t32-t37
	t34 = t2*t4*t6
	t35 = t2*t5*t7
	t36 = t34+t35
	t38 = b5_3*t2
	t39 = s4_3*t2
	t40 = b3_3*t2
	t41 = b3_2*t3*t4
	t42 = b3_1*t3*t5
	t43 = t2+t15+t17
	t44 = b6_3*t43
	t45 = s5_2*t19
	t46 = t12*t33
	t58 = t14*t36
	t47 = t46-t58
	t48 = t12*t36
	t49 = t2*t22
	t59 = t19*t21
	t50 = t49-t59
	t51 = t2*t21
	t52 = t19*t22
	t53 = t51+t52
	t54 = b6_2*t53
	t55 = t14*(t32-t37)
	t56 = t48+t55
	t57 = b5_1*t31
	t60 = b6_3*(t46-t58)*3.0
	t61 = b6_2*t22*t56*3.0
	t62 = b6_1*t21*t56*3.0
	t63 = t3*t22
	t77 = t21*t47
	t64 = t63-t77
	t65 = t3*t21
	t66 = t22*t47
	t67 = t65+t66
	t68 = t14*t33
	t69 = b4_1*t36
	t70 = s3_2*t2*t4
	t71 = s3_1*t2*t5
	t72 = b4_2*t33
	t73 = s4_1*t36
	t74 = b5_1*t56
	t75 = b5_2*t47
	t76 = s4_2*t33
	t78 = b6_1*t64
	t79 = -t3+t48+t68
	t80 = b6_3*t79
	t81 = s5_3*t3
	t82 = b3_2*t2*t4
	t83 = b3_1*t2*t5
	t84 = s5_1*t56
	t85 = b6_2*t67
	t86 = s5_2*t47
	t87 = b6_2*t22*t31*3.0
	t88 = b6_1*t21*t31*3.0
	t89 = t4*t6
	t90 = t5*t7
	t91 = t89+t90
	t92 = t4*t7
	t95 = t5*t6
	t93 = t92-t95
	t94 = t12*t91
	t96 = t14*t93
	t97 = t94+t96
	t98 = t12*t93
	t100 = t14*t91
	t99 = t98-t100
	t101 = b6_2*t22*t99*3.0
	t102 = b6_1*t21*t99*3.0
	D_vm = np.reshape([-m5*(t29+t30+t38+t39-b5_2*t19+b5_1*(t15+t13*t14))-m3*(t40+t41+t42+s2_1*t2+s2_2*t3)+m6*(t44+t45+t54-b6_1*t50-s5_3*t2-s5_1*t31)-m2*(b2_1*t2+b2_2*t3)-m4*(t23+t24+t25+t26+t27+t28),m6*(t78+t80+t81-b6_2*t67-s5_2*t47-s5_1*t56)-m4*(t69+t70+t71+t72-b4_3*t3-s3_3*t3)-m5*(t73+t74+t75+t76-b5_3*t3-s4_3*t3)+m2*(b2_1*t3-b2_2*t2)-m3*(t82+t83-b3_3*t3-s2_1*t3+s2_2*t2),0.0,m6*(t44+t45+t54+b6_3*t47-b6_1*t50-s5_3*t2-s5_1*t31-s5_1*t47+s5_2*t56+b6_1*t21*t56+b6_2*t22*t56)-m5*(t29+t30+t38+t39+t57-b5_2*(t48+t68)-b5_2*t19+b5_1*t47+s4_1*t33-s4_2*t36)-m4*(t23+t24+t25+t26+t27+t28+b4_1*t33-b4_2*t36+s3_1*t2*t4-s3_2*t2*t5)-m3*(t40+t41+t42+b3_1*t2*t4-b3_2*t2*t5),-m6*(-t78-t80-t81+t84+t85+t86-b6_3*t19+s5_1*t19+s5_2*t31+b6_1*t21*t31+b6_2*t22*t31)-m4*(t69+t70+t71+t72-b4_3*t3+b4_2*t10-b4_1*t13-s3_3*t3-s3_1*t3*t4+s3_2*t3*t5)-m5*(t73+t74+t75+t76-b5_3*t3+b5_1*t19+b5_2*t31-s4_3*t3+s4_2*t10-s4_1*t13)-m3*(t82+t83-b3_3*t3-b3_1*t3*t4+b3_2*t3*t5),m4*(b4_1*t91+b4_2*t93+s3_1*t5+s3_2*t4)+m5*(b5_1*t97+b5_2*t99+s4_1*t91+s4_2*t93)+m6*(-b6_3*t97+s5_1*t97+s5_2*t99+b6_1*t21*t99+b6_2*t22*t99)+m3*(b3_1*t5+b3_2*t4),m6*(t44+t45+t54-b6_1*t50-s5_3*t2-s5_1*t31-s5_1*t47*2.0+s5_2*t56*2.0+b6_3*(t46-t58)*2.0+b6_1*t21*t56*2.0+b6_2*t22*t56*2.0)-m5*(t29+t30+t38+t39+t57-b5_2*t19+b5_1*t47*2.0-b5_2*t56*2.0+s4_1*t33*2.0-s4_2*t36*2.0)-m4*(t23+t24+t28+b4_1*t33*2.0-b4_2*t36*2.0),-m6*(-t78-t80-t81+t84+t85+t86-b6_3*t19*2.0+s5_1*t19*2.0+s5_2*t31*2.0+b6_1*t21*t31*2.0+b6_2*t22*t31*2.0)-m5*(t73+t74+t75+t76-b5_3*t3+b5_1*t19*2.0+b5_2*t31*2.0-s4_3*t3+s4_2*t10*2.0-s4_1*t13*2.0)-m4*(t69+t72-b4_3*t3+b4_2*t10*2.0-b4_1*t13*2.0),m5*(b5_1*t97*2.0+b5_2*t99*2.0+s4_1*t91*2.0+s4_2*t93*2.0)+m6*(b6_3*t97*-2.0+s5_1*t97*2.0+s5_2*t99*2.0+b6_1*t21*t99*2.0+b6_2*t22*t99*2.0)+m4*(b4_1*t91*2.0+b4_2*t93*2.0),m6*(t44+t45+t54+t60+t61+t62-b6_1*t50-s5_3*t2-s5_1*t31-s5_1*t47*3.0+s5_2*t56*3.0)-m5*(t38+t57-b5_2*t19+b5_1*t47*3.0-b5_2*t56*3.0),-m6*(-t78-t80-t81+t84+t85+t86+t87+t88-b6_3*t19*3.0+s5_1*t19*3.0+s5_2*t31*3.0)-m5*(t74+t75-b5_3*t3+b5_1*t19*3.0+b5_2*t31*3.0),m5*(b5_1*t97*3.0+b5_2*t99*3.0)+m6*(t101+t102-b6_3*t97*3.0+s5_1*t97*3.0+s5_2*t99*3.0),m6*(t44+t54+t60+t61+t62-b6_1*t50-b6_2*t64-b6_1*t67),-m6*(-t78-t80+t85+t87+t88-b6_3*t19*3.0+b6_2*t50+b6_1*t53),-m6*(-t101-t102+b6_3*t97*3.0+b6_1*(t21-t22*t97)+b6_2*(t22+t21*t97))],(5,3)).T 
	return 	D_vm 