import numpy as np 
import math
def C_vm (in1,in2,in3,in4,in5,in6,in7,in8,in9,in10):
#NONLINEAR_C_VM
#    C_VM = NONLINEAR_C_VM(IN1,IN2,IN3,IN4,IN5,IN6,IN7,IN8,IN9,IN10)

#    This function was generated by the Symbolic Math Toolbox version 8.2.
	in1 = np.insert(in1,0,0)
	in2 = np.insert(in2,0,0)
	in3 = np.insert(in3,0,0)
	in4 = np.insert(in4,0,0)
	in5 = in5.T.flatten()
	in5 = np.insert(in5,0,0)
	in6 = in6.T.flatten()
	in6 = np.insert(in6,0,0)
	in7 = in7.T.flatten()
	in7 = np.insert(in7,0,0)
	in8 = np.insert(in8,0,0)
	in9 = np.insert(in9,0,0)
	in10 = in10.T.flatten()
	in10 = np.insert(in10,0,0)
#    11-Jan-2019 11:33:00

	b2_1 = in7[2]
	b2_2 = in7[8]
	b3_1 = in7[3]
	b3_2 = in7[9]
	b4_1 = in7[4]
	b4_2 = in7[10]
	b5_1 = in7[5]
	b5_2 = in7[11]
	b6_1 = in7[6]
	b6_2 = in7[12]
	m2 = in1[2 ]
	m3 = in1[3 ]
	m4 = in1[4 ]
	m5 = in1[5 ]
	m6 = in1[6 ]
	theta1 = in3[1]
	theta2 = in3[2]
	theta3 = in3[3]
	theta4 = in3[4]
	theta5 = in3[5]
	theta_d1 = in4[1]
	theta_d2 = in4[2]
	theta_d3 = in4[3]
	theta_d4 = in4[4]
	theta_d5 = in4[5]
	t2 = np.cos(theta1)
	t3 = np.cos(theta2)
	t4 = np.sin(theta3)
	t5 = np.cos(theta3)
	t6 = np.sin(theta2)
	t7 = np.cos(theta4)
	t8 = t2*t3*t4
	t9 = t2*t5*t6
	t10 = t8+t9
	t11 = np.sin(theta4)
	t12 = t2*t3*t5
	t19 = t2*t4*t6
	t13 = t12-t19
	t14 = t7*t13
	t20 = t10*t11
	t15 = t14-t20
	t16 = np.cos(theta5)
	t17 = np.sin(theta1)
	t18 = np.sin(theta5)
	t21 = b5_1*t15
	t22 = t7*t10
	t23 = t3*t5*t17
	t29 = t4*t6*t17
	t24 = t23-t29
	t25 = t3*t4*t17
	t26 = t5*t6*t17
	t27 = t25+t26
	t28 = b4_2*t10
	t30 = t15*t16
	t44 = t17*t18
	t31 = t30-t44
	t32 = b6_1*t31
	t33 = t16*t17
	t34 = t7*t27
	t35 = t11*(t23-t29)
	t36 = t34+t35
	t37 = t15*t18
	t38 = t33+t37
	t39 = b3_1*t2*t3
	t40 = t11*(t12-t19)
	t41 = t22+t40
	t42 = b5_2*t41
	t43 = t7*t24
	t46 = t11*t27
	t45 = t43-t46
	t47 = b6_2*t18*t36*3.0
	t48 = t2*t18
	t49 = t2*t16
	t55 = t18*t45
	t50 = t49-t55
	t51 = t16*t45
	t52 = t48+t51
	t53 = b5_2*t36
	t54 = b4_1*t24
	t56 = b6_2*t50
	t57 = b6_1*t52
	t58 = b3_1*t3*t17
	t59 = b5_1*t45
	t60 = b6_1*t16*t41*3.0
	t61 = t3*t5
	t68 = t4*t6
	t62 = t61-t68
	t63 = t7*t62
	t64 = t3*t4
	t65 = t5*t6
	t66 = t64+t65
	t69 = t11*t66
	t67 = t63-t69
	t70 = t7*t66
	t71 = t11*t62
	t72 = t70+t71
	t73 = b6_1*t16*t67*3.0
	C_vm = np.reshape([-m2*theta_d1*(b2_1*t2-b2_2*t17)+m4*theta_d3*(t28-b4_1*t13)-m6*theta_d5*(t32-b6_2*t38)-m3*theta_d2*(t39-b3_2*t2*t6)-m5*theta_d4*(t21-b5_2*(t22+t11*t13)),-m2*theta_d1*(b2_2*t2+b2_1*t17)-m4*theta_d3*(t54-b4_2*t27)+m5*theta_d4*(t53-b5_1*t45)-m6*theta_d5*(t56+t57)-m3*theta_d2*(t58-b3_2*t6*t17),0.0,m3*theta_d2*(-t39+b3_2*t2*t6+b3_2*t3*t17+b3_1*t6*t17)-m6*theta_d5*(t32-b6_2*t38-b6_1*t16*t36+b6_2*t18*t36)+m4*theta_d3*(t28-b4_1*t13+b4_1*t27+b4_2*(t23-t29))+m5*theta_d4*(-t21+t42+b5_2*t45+b5_1*(t34+t11*t24)),-m3*theta_d2*(t58+b3_2*t2*t3+b3_1*t2*t6-b3_2*t6*t17)-m5*theta_d4*(-t53+t59+b5_2*t15+b5_1*t41)-m4*theta_d3*(t54+b4_1*t10+b4_2*t13-b4_2*t27)-m6*theta_d5*(t56+t57+b6_1*t16*t41-b6_2*t18*t41),m3*theta_d2*(b3_1*t3-b3_2*t6)+m4*theta_d3*(b4_1*t62-b4_2*t66)+m5*theta_d4*(b5_1*t67-b5_2*t72)+m6*theta_d5*(b6_1*t16*t67-b6_2*t18*t67),m5*theta_d4*(-t21+t42+b5_1*t36*2.0+b5_2*t45*2.0)-m6*theta_d5*(t32-b6_2*t38-b6_1*t16*t36*2.0+b6_2*t18*t36*2.0)+m4*theta_d3*(t28-b4_1*t13+b4_1*t27*2.0+b4_2*(t23-t29)*2.0),-m5*theta_d4*(-t53+t59+b5_2*t15*2.0+b5_1*t41*2.0)-m4*theta_d3*(t54+b4_1*t10*2.0+b4_2*t13*2.0-b4_2*t27)-m6*theta_d5*(t56+t57+b6_1*t16*t41*2.0-b6_2*t18*t41*2.0),m4*theta_d3*(b4_1*t62*2.0-b4_2*t66*2.0)+m5*theta_d4*(b5_1*t67*2.0-b5_2*t72*2.0)+m6*theta_d5*(b6_1*t16*t67*2.0-b6_2*t18*t67*2.0),m5*theta_d4*(-t21+t42+b5_1*t36*3.0+b5_2*t45*3.0)-m6*theta_d5*(t32+t47-b6_2*t38-b6_1*t16*t36*3.0),-m5*theta_d4*(-t53+t59+b5_2*t15*3.0+b5_1*t41*3.0)-m6*theta_d5*(t56+t57+t60-b6_2*t18*t41*3.0),m5*theta_d4*(b5_1*t67*3.0-b5_2*t72*3.0)+m6*theta_d5*(t73-b6_2*t18*t67*3.0),-m6*theta_d5*(t32+t47-b6_2*t38+b6_1*t50-b6_2*t52-b6_1*t16*t36*3.0),-m6*theta_d5*(t56+t57+t60+b6_2*t31+b6_1*t38-b6_2*t18*t41*3.0),m6*theta_d5*(t73-b6_1*(t16+t18*t72)+b6_2*(t18-t16*t72)-b6_2*t18*t67*3.0)],(5,3)).T 
	return 	C_vm 